{
  "name": "LaraDock",
  "tagline": "Like Laravel Homstead but for Docker instead of Vagrant.",
  "body": "# LaraDock\r\n\r\n[![forthebadge](http://forthebadge.com/images/badges/built-with-love.svg)](http://www.zalt.me)\r\n\r\n\r\nLaraDock helps you run your **Laravel** App on **Docker** real quick.\r\n<br>\r\nIt's like Laravel Homestead but for Docker instead of Vagrant.\r\n\r\n\r\n![](http://s18.postimg.org/fhykchl09/new_laradock_cover.png)\r\n\r\n<br>\r\n## Contents\r\n\r\n\r\n- [Intro](#Intro)\r\n\t- [Features](#features)\r\n\t- [What is Docker](#what-is-docker)\r\n\t- [What is Laravel](#what-is-laravel)\r\n\t- [Why Docker not Vagrant](#why-docker-not-vagrant)\r\n\t- [LaraDock VS Homestead](#laradock-vs-homestead)\r\n- [Supported Containers](#Supported-Containers)\r\n- [Requirements](#Requirements)\r\n- [Installation](#Installation)\r\n- [Usage](#Usage)\r\n- [Documentation](#Documentation)\r\n\t- [List current running Containers](#List-current-running-Containers)\r\n\t- [Close all running Containers](#Close-all-running-Containers)\r\n\t- [Delete all existing Containers](#Delete-all-existing-Containers)\r\n\t- [Build/Re-build Containers](#Build-Re-build-Containers)\r\n\t- [Use Redis](#Use-Redis)\r\n\t- [Change the PHP Version](#Change-the-PHP-Version)\r\n\t- [Add/Remove a Docker Container](#AddRemove-a-Docker-Container)\r\n\t- [Add more Software's (Docker Images)](#Add-Docker-Images)\r\n\t- [Edit default container configuration](#Edit-Container)\r\n\t- [Use custom Domain](Use-custom-Domain)\r\n\t- [View the Log files](#View-the-Log-files)\r\n\t- [Enter a Container (SSH into a running Container)](#Enter-Container)\r\n\t- [Edit a Docker Image](#Edit-a-Docker-Image)\r\n\t- [Run a Docker Virtual Host](#Run-Docker-Virtual-Host)\r\n\t- [Find your Docker IP Address](#Find-Docker-IP-Address)\r\n\r\n\r\n\r\n\r\n\r\n<a name=\"Intro\"></a>\r\n## Intro\r\n\r\nLaraDock strives to make the development experience easier.\r\nIt contains pre-packaged Docker Images that provides you a wonderful development environment without requiring you to install PHP, NGINX, MySQL, REDIS, and any other software on your local machine.\r\n\r\n\r\n<a name=\"features\"></a>\r\n### Features\r\n\r\n- Easy switch between PHP versions: 7.0 - 5.6 - 5.5 - ...\r\n- Choose your favorite database engine: MySQL - Postgres - Redis - ...\r\n- Run your own combination of software's: PHP - NGINX - MySQL - ...\r\n- Everything runs on a separate container: PHP - NGINX - Postgres - Redis ...\r\n- Easy to customize any container, with simple edit to the `dockerfile`.\r\n- All Images extends from the official base Image. (Trusted base Images).\r\n- Pre-configured Nginx for Laravel. And very easy to update.\r\n- Using of a Data container, to keep the Data safe and access it anytime.\r\n- Easy to apply configurations inside containers.\r\n- Clean and well structured Docker files (`dockerfile`).\r\n- Latest version of the Docker Compose file (`docker-compose`).\r\n- Everything is visible and editable.\r\n- Best practices everywhere.\r\n\r\n\r\n<a name=\"what-is-docker\"></a>\r\n### What is Docker?\r\n\r\n[Docker](https://www.docker.com)  is an open-source project that automates the deployment of applications inside software containers, by providing an additional layer of abstraction and automation of [operating-system-level virtualization](https://en.wikipedia.org/wiki/Operating-system-level_virtualization) on Linux, Mac OS and Windows.\r\n\r\n<a name=\"what-is-laravel\"></a>\r\n### What is Laravel?\r\n\r\nSeriously!!!\r\n\r\n\r\n<a name=\"why-docker-not-vagrant\"></a>\r\n### Why Docker not Vagrant!?\r\n\r\n[Vagrant](https://www.vagrantup.com) creates Virtual Machines in minutes while Docker creates Virtual Containers in seconds.\r\n\r\nInstead of providing a full Virtual Machines, like you get with Vagrant, Docker provides you **lightweight** Virtual Containers, that share the same kernel and allow to safely execute independent processes.\r\n\r\nIn addition to the speed, Docker gives tens of features that cannot be achieved with Vagrant.\r\n\r\nMost importantly Docker can run on Development and on Production (same environment everywhere). While Vagrant is designed for Development only, (so you have to re-provision your server on Production every time).\r\n\r\n\r\n<a name=\"laradock-vs-homestead\"></a>\r\n### LaraDock VS Homestead\r\n\r\nLaraDock and [Homestead](https://laravel.com/docs/master/homestead) both gives you a complete virtual development environments. (Without the need to install and configure every single software on your own Operating System).\r\n\r\n- Homestead is a tool that controls Vagrant for you (using Homestead special commands). And Vagrant manages your Virtual Machine.\r\n\r\n- LaraDock is a tool that controls Docker for you (using Docker Compose official commands). And Docker manages you Virtual Containers.\r\n\r\nRunning a virtual Container is much faster than running a full virtual Machine. \r\n<br>Thus **LaraDock is much faster than Homestead**.\r\n\r\n<a name=\"Supported-Containers\"></a>\r\n## Supported Containers\r\n\r\n- PHP\r\n- NGINX\r\n- MySQL\r\n- PostgreSQL\r\n- Redis\r\n- Data Volume\r\n\r\nCannot find your container! we would love to have it as well. Consider contributing your container and adding it to the list.\r\n\r\n\r\n\r\n<a name=\"Requirements\"></a>\r\n## Requirements\r\n- Laravel ([Download](https://laravel.com/docs/master/installation))\r\n- Docker Toolbox ([Download](https://www.docker.com/toolbox))\r\n- Git ([Download](https://git-scm.com/downloads))\r\n- Composer ([Download](https://getcomposer.org/download/))\r\n\r\n\r\n\r\n<a name=\"Installation\"></a>\r\n## Installation\r\n\r\n1 - Clone the `LaraDock` repository, in any of your `Laravel` projects:\r\n\r\n```bash\r\ngit clone https://github.com/LaraDock/laradock.git docker\r\n```\r\n\r\nInstead of `git clone` you can use `git submodule add` in case you are already using Git for your Laravel project *(Recommended)*:\r\n\r\n```bash\r\ngit submodule add https://github.com/LaraDock/laradock.git docker\r\n```\r\n\r\n>These commands should create a `docker` folder, on the root directory of your Laravel project.\r\n\r\n\r\n\r\n\r\n<a name=\"Usage\"></a>\r\n## Usage\r\n\r\n>**(Windows & MAC users)** Make sure you have a running Docker Virtual Host on your machine first. \r\n><br>\r\n>[How to run a Docker Virtual Host?](#Run-Docker-Virtual-Host)\r\n\r\n\r\n<br>\r\n1 - Open your Laravel's `.env` file and set the `DB_HOST` to your `{Docker-IP}`:\r\n\r\n```env\r\nDB_HOST=xxx.xxx.xxx.xxx\r\n```\r\n[How to find my Docker IP Address?](#Find-Docker-IP-Address)\r\n\r\n<br>\r\n2 - Run the Containers, (you can select the software's (containers) that you wish to run)\r\n<br>\r\n*Make sure you are in the `docker` folder before running the `docker-compose` command.*\r\n\r\n> Running PHP, NGINX and MySQL:\r\n\r\n```bash\r\ndocker-compose up -d   php nginx mysql\r\n```\r\n\r\nNote: you can choose your own combination of software's (containers), another example:\r\n\r\n> Running PHP, NGINX, Postgres and Redis:\r\n\r\n```bash\r\ndocker-compose up -d   php nginx postgres redis\r\n```\r\n\r\nSupported Containers: `php`, `nginx`, `mysql`, `postgres`, `redis`, `data`.\r\n\r\n<br>\r\n3 - Open your browser and visit your `{Docker-IP}` address (`http://xxx.xxx.xxx.xxx`).\r\n\r\n\r\n<br>\r\n**Debugging**: in case you faced an error here, run this command from the Laravel root directory:\r\n\r\n```bash\r\nsudo chmod -R 777 storage && sudo chmod -R 777 bootstrap/cache\r\n```\r\n\r\n<br>\r\n\r\n\r\n[Follow @Mahmoud_Zalt](https://twitter.com/Mahmoud_Zalt)\r\n\r\n\r\n\r\n\r\n<br>\r\n<a name=\"Documentation\"></a>\r\n## Documentation\r\n\r\n<a name=\"List-current-running-Containers\"></a>\r\n#### List current running Containers\r\n```bash\r\ndocker ps\r\n```\r\n\r\n<br>\r\n<a name=\"Close-all-running-Containers\"></a>\r\n#### Close all running Containers\r\n```bash\r\ndocker-compose stop\r\n```\r\n\r\nTo stop single container do:\r\n\r\n```php\r\ndocker-compose stop {container-name}\r\n```\r\n\r\n\r\n\r\n<br>\r\n<a name=\"Delete-all-existing-Containers\"></a>\r\n#### Delete all existing Containers\r\n```bash\r\ndocker-compose rm -f\r\n```\r\n\r\n*Note: Careful with this command as it will delete your Data Volume Container as well. (if you want to keep your Database data than you should stop each container by itself as follow):* \r\n\r\n\r\n\r\n\r\n<br>\r\n<a name=\"Build-Re-build-Containers\"></a>\r\n#### Build/Re-build Containers\r\n\r\nIf you do any change to any `dockerfile` make sure you run this command, for the changes to take effect:\r\n\r\n```bash\r\ndocker-compose build\r\n```\r\nOptionally you can specify which container to rebuild (instead of rebuilding all the containers):\r\n\r\n```bash\r\ndocker-compose build {container-name}\r\n```\r\n\r\n\r\n<br>\r\n<a name=\"Use-Redis\"></a>\r\n#### Use Redis\r\n\r\n1 - First make sure you run the Redis Container with the `docker-compose` command.\r\n\r\n2 - Open your Laravel's `.env` file and set the `REDIS_HOST` to your `Docker-IP` instead of the default `127.0.0.1` IP.\r\n\r\n```env\r\nREDIS_HOST=xxx.xxx.xxx.xxx\r\n```\r\n\r\nIf you don't find the `REDIS_HOST` variable in your `.env` file. Go to the database config file `config/database.php` and replace the default `127.0.0.1` IP with your `Docker-IP` for Redis like this:\r\n\r\n```php\r\n'redis' => [\r\n    'cluster' => false,\r\n    'default' => [\r\n        'host'     => 'xxx.xxx.xxx.xxx',\r\n        'port'     => 6379,\r\n        'database' => 0,\r\n    ],\r\n],\r\n```\r\n\r\n3 - To enable Redis Caching and/or for Sessions Management. Also from the `.env` file set `CACHE_DRIVER` and `SESSION_DRIVER` to `redis` instead of the default `file`.\r\n\r\n```env\r\nCACHE_DRIVER=redis\r\nSESSION_DRIVER=redis\r\n```\r\n\r\n4 - Finally make sure you have the `predis/predis` package `(~1.0)` installed via Composer first.\r\n\r\n```bash\r\ncomposer require predis/predis:^1.0\r\n```\r\n\r\n5 - You can manually test it from Laravel with this code:\r\n\r\n```php\r\n\\Cache::store('redis')->put('LaraDock', 'Awesome', 10);\r\n```\r\n\r\n\r\n\r\n<br>\r\n<a name=\"Change-the-PHP-Version\"></a>\r\n#### Change the PHP Version\r\nBy default **PHP 7.0** is running.\r\n<br>\r\nTo change the default PHP version:\r\n\r\n1 - Open the `dockerfile` of the `php` folder.\r\n\r\n2 - Change the PHP version number in the first line,\r\n\r\n```txt\r\nFROM php:7.0-fpm\r\n```\r\n\r\nSupported Versions:\r\n\r\n- For (PHP 7.0.*) use `php:7.0-fpm`\r\n- For (PHP 5.6.*) use `php:5.6-fpm`\r\n- For (PHP 5.5.*) use `php:5.5-fpm`\r\n\r\nFor more details visit the [official PHP docker images](https://hub.docker.com/_/php/).\r\n\r\n3 - Finally rebuild the container\r\n\r\n```bash\r\ndocker-compose build php\r\n```\r\n\r\n\r\n<br>\r\n<a name=\"Add-Docker-Images\"></a>\r\n#### Add more Software's (Docker Images)\r\n\r\nTo add an image (software), just edit the `docker-compose.yml` and add your container details, to do so you need to be familiar with the [docker compose file syntax](https://docs.docker.com/compose/compose-file/).\r\n\r\n\r\n\r\n<br>\r\n<a name=\"Edit-Container\"></a>\r\n#### Edit default container configuration\r\nOpen the `docker-compose.yml` and change anything you want.\r\n\r\nExamples: \r\n\r\nChange MySQL Database Name:\r\n\r\n```yml\r\n  environment:\r\n    MYSQL_DATABASE: laradock\r\n```\r\n\r\nChange Redis defaut port to 1111:\r\n\r\n```yml\r\n  ports:\r\n    - \"1111:6379\"\r\n```\r\n\r\n\r\n\r\n<br>\r\n<a name=\"Use-custom-Domain\"></a>\r\n#### Use custom Domain (instead of the Docker IP)\r\n\r\nAssuming your custom domain is `laravel.dev` and your current `Docker-IP` is `xxx.xxx.xxx.xxx`.\r\n\r\n1 - Open your `/etc/hosts` file and map your `Docker IP` to the `laravel.dev` domain, by adding the following:\r\n\r\n```bash\r\nxxx.xxx.xxx.xxx    laravel.dev\r\n```\r\n\r\n2 - Open your Laravel's `.env` file and replace the `127.0.0.1` default values with your `{Docker-IP}`.\r\n<br>\r\nExample:\r\n\r\n```env\r\nDB_HOST=xxx.xxx.xxx.xxx\r\n```\r\n\r\n3 - Open your browser and visit `{http://laravel.dev}`\r\n\r\n\r\n\r\nOptionally you can define the server name in the nginx config file, like this:\r\n\r\n```\r\nserver_name laravel.dev;\r\n```\r\n\r\n\r\n\r\n\r\n<br>\r\n<a name=\"View-the-Log-files\"></a>\r\n#### View the Log files \r\nThe Log files are stored in the `docker/logs` directory.\r\n\r\n\r\n\r\n\r\n<br>\r\n<a name=\"Enter-Container\"></a>\r\n#### Enter a Container (SSH into a running Container)\r\n\r\n1 - first list the current running containers with `docker ps`\r\n\r\n2 - enter any container with:\r\n\r\nExample: enter the `php` container\r\n\r\n```bash\r\ndocker exec -it php bash\r\n```\r\n\r\nExample: enter the `nginx` container\r\n\r\n```bash\r\ndocker exec -it nginx bash\r\n```\r\n\r\n\r\n\r\n<br>\r\n<a name=\"AddRemove-a-Docker-Container\"></a>\r\n#### Add/Remove a Docker Container\r\nTo prevent a container (software) from running, open the `docker-compose.yml` file, and comment out the container section or remove it entirely.\r\n\r\n\r\n\r\n\r\n<br>\r\n<a name=\"Edit-a-Docker-Image\"></a>\r\n#### Edit a Docker Image\r\n\r\n1 - Find the `dockerfile` of the image you want to edit, \r\n<br>\r\nexample for `php` it will be `docker/php/dockerfile`.\r\n\r\n2 - Edit the file the way you want.\r\n\r\n3 - Re-build the container:\r\n\r\n```bash\r\ndocker-compose build\r\n```\r\n\r\n*If you find any bug or you have and suggestion that can improve the performance of any image, please consider contributing. Thanks in advance.*\r\n\r\n\r\n\r\n\r\n<br>\r\n<a name=\"Run-Docker-Virtual-Host\"></a>\r\n#### Run a Docker Virtual Host\r\n\r\nThese steps are only for **Windows & MAC** users *(Linux users don't need a virtual host)*:\r\n\r\n1 - Run the default Host:\r\n\r\n```bash\r\ndocker-machine start default\r\n```\r\n\r\n* If the host \"default\" does not exist, create one using the command below, else skip it:\r\n\r\n* ```bash\r\n  docker-machine create -d virtualbox default\r\n  ```\r\n\r\n2 - Run this command to configure your shell:\r\n\r\n```bash\r\neval $(docker-machine env)\r\n```\r\n\r\n\r\n\r\n<br>\r\n<a name=\"Find-Docker-IP-Address\"></a>\r\n#### Find your Docker IP Address \r\n\r\n**On Windows & MAC:** \r\n\r\n```bash\r\ndocker-machine ip default\r\n```\r\n*(The default IP is 192.168.99.100)*\r\n\r\n**On Linux:** \r\n\r\nYour IP Address is `127.0.0.1`\r\n\r\n> **boot2docker** users: run `boot2docker ip` *(when boot2docker is up)*.\r\n\r\n\r\n\r\n\r\n<br>\r\n## Contributing\r\n\r\nThis little project was built by one man who has a full time job and many responsibilities, so if you like this project and you find that it needs a bug fix or support for new software or upgrade for the current containers, or anything else.. Do not hesitate to contribute, you are more than welcome :)\r\n\r\nAll Docker Images can be found at [https://github.com/LaraDock](https://github.com/LaraDock)\r\n\r\n## Support\r\n\r\n[Issues](https://github.com/laradock/laradock/issues) on Github.\r\n\r\n\r\n\r\n### Questions?\r\nIf you have any question, send me a direct message on LaraChat, my username is `mahmoud_zalt`.\r\n\r\n\r\n## Credits\r\n\r\n[![Mahmoud Zalt](https://img.shields.io/badge/Author-Mahmoud%20Zalt-orange.svg)](http://www.zalt.me)\r\n\r\n\r\n\r\n## License\r\n\r\n[MIT License (MIT)](https://github.com/laradock/laradock/blob/master/LICENSE)\r\n[]([]())",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}